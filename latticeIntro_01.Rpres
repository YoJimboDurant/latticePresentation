Introduction to Lattice
========================================================
class:title-slide
author: James Durant
date: 03/28/2015

    
Why lattice?
========================================================

Lattice uses trellis graphics like *ggplot2* but interface is different
- uses functions with formula calls
- graphical parameters, legends, scales, functions performed on conditioned data are controlled through lists passed to the function
- default appearance can be set ahead of time, and changed
- returns object which can be manipulated, combined or otherwise changed as needed
- speed, flexibility, and age of package makes it possible that you will encounter a package that uses it.

Basic lattice example
========================================================
What we will be covering today
- basic ways to create lattice plots
- how to modify appearence of lattice plot objects using themes
- 2 examples of customized plots in lattice

Basic lattice example
========================================================
class:small-code
There are 2 packages generally used:

```{r}
library(lattice)
library(latticeExtra)
```
Both provide functions that perform graphing, although the 'Extra' script works more with plot manipulation.
Example Plot
========================================================
class:small-code
```{r, fig.align='left', fig.width=8, fig.height=4}
carPlot <- xyplot(dist ~ speed, data=cars, type=c("p","r","g"), xlab="Speed (mph)", ylab="Stopping Distance (ft)")
class(carPlot)
plot(carPlot)
```
***
Note the class of carPlot is *trellis* -  we will talk about modifying how trellis objects are displayed later.

Arguments of xyplot
========================================================
class:small 
* <span style="color:red">`dist ~ speed`</span> is formula relating distance as a function of speed. 
* <span style="color:red">`data = cars`</span>  is the data.frame we are analyzing (built in dataset see `?cars`)
* <span style="color:red">`type = c("p","r", "g")`</span> is an argument passed to the `panel.xyplot` function which does the following:
  + `"p"` adds `panel.points` function
  + `"r"` adds `panel.lmline` function
  + `"g"` adds `panel.grid` to function
* <span style="color:red">`xlab`</span> and <span style="color:red">`ylab`</span> are the same as `plot` 

Types of lattice plots - and more and more
========================================================
class:small 
Examples from lattice book are available online:

http://lmdvr.r-forge.r-project.org/figures/figures.html

Basics of a lattice plot call
========================================================
class:small 
- a formula
- a panel function (can be left at default or changed)
- scales (as list)
- key (as list) produce legend or key
- par.settings (as list) control appearence settings
- Extra arguments

Basics of a lattice plot call - formula
========================================================
class:small-code
Compare across (|) score
```{r, fig.align='center', fig.width=10, fig.height=6}
xyplot(mpg~ hp | factor(cyl), data = mtcars, layout=c(3,1))
```

Basics of a lattice plot call - formula
========================================================
class:small-code
Compare across (|) score
```{r, fig.align='center', fig.width=10, fig.height=6}
xyplot(mpg~ hp| factor(cyl), group= factor(gear), data = mtcars, layout=c(3,1), auto.key=TRUE)
```

So What Controls Appearence in Lattice Plots?
========================================================
class:small-code
There is a function to show how the graphics will default display in lattice:

```{r, fig.align='center'}
show.settings()
```


Finding and Changing trellis.par
========================================================
class:small-code
- Use trellis.par.get() to get the current theme, and pass it into 2 objects - oldTheme and newTheme. 
- We will edit newTheme and save oldTheme for latter.
```{r}
newTheme <- oldTheme <-trellis.par.get()
grep("symbol", names(newTheme), value=TRUE)
data.frame(trellis.par.get("plot.symbol"))
```


Finding and Changing trellis.par
========================================================
class:small-code
```{r}
data.frame(newTheme$plot.symbol) # data.frame is optional - just makes things fit in slide
```
There are 6 properties that control the appearance of plot symbol:
- alpha is transparency [0-1]
- cex is size
- col is color
- font is font set
- pch is symbol
- fill is color fill


Finding and Changing trellis.par
========================================================
class:small-code
You can also use grep to find all parameters that control color of polygon:

```{r}
lapply(newTheme[grep("polygon", names(newTheme))], names)
```

Finding and Changing trellis.par
========================================================
class:small-code
Change some default paramters:
```{r, fig.align='center'}
newTheme$plot.symbol$pch <- 20
newTheme$plot.symbol$col <- "#000000"
newTheme$plot.line$col <- "red"
trellis.par.set(newTheme)
show.settings()
```
trellis.par.set changes the default behavior of the lattice graphics.

Finding and Changing trellis.par example
========================================================
class:small-code
Now when we call xyplot, it will use black circles and a red line:
```{r, fig.align='center'}
plot(carPlot)
```

Finding and Changing trellis.par example
========================================================
class:small-code
But if I wanted to go back (for this plot):
```{r, fig.align='center'}
update(carPlot, par.settings=oldTheme)
```

Key thoughts for controling appearence in lattice
========================================================
- appearence is a 'theme' controled by a list of parameters
- current settings obtained by trellis.par.get and/or show.settings()
- can be manipulated and set with trellis.par.set()
- set for an individual lattice plot with the par.setting argument.

What does this do for you?
========================================================
class:small-code
Themes can be pre-defined:
```{r, fig.align='center'}
update(carPlot, par.settings=ggplot2like())
```

What does this do for you?
========================================================
class:small-code
Or even for a publication:
```{r, fig.align='center'}
update(carPlot, par.settings=theEconomist.theme(with.bg=TRUE), type=c("p","r"))
```

What does this do for you?
========================================================
class:small-code
Or even for a publication:
```{r, fig.align='center'}
bwtheme <- standard.theme("pdf", color=FALSE)
bwtheme$plot.symbol$pch <- 20
update(carPlot, par.settings = bwtheme)
```


Example 2: Customized panel function
========================================================
class:small-code
We use the attributes of a lattice xyplot to help create a arrows using panel.arrows:
[code](./testXYPLOT.R)
```{r, echo=FALSE, fig.align='center'}
require(latticeExtra)
require(openair)
library(circular)

Sys.setenv(TZ='GMT')

testData <- selectByDate(mydata, start="1/7/1999", end="2/7/1999")

plt <- xyplot(pm10~date, data=testData, type="g", xlab="Date", ylab=quickText("pm10 (ug.m-3)"))

deltaX <- as.numeric(plt$x.limits[[2]]) - as.numeric(plt$x.limits[[1]])
deltaY <- as.numeric(plt$y.limits[[2]]) - as.numeric(plt$y.limits[[1]])

pltRatio <- plt$aspect.ratio
ratio <- deltaY/deltaX
factor = 3600
length = 0.05

#scale wind speed
scaleWS <- testData$ws/max(testData$ws, na.rm=TRUE)

testData$u <- sin(rad(testData$wd))  * factor * scaleWS
testData$v <- cos(rad(testData$wd)) *  factor * ratio/pltRatio * scaleWS

plt2 <- xyplot(pm10~date, data=testData, x0=testData$date + testData$u ,y0=testData$pm10 + testData$v, x1 = testData$date - testData$u,
               y1= testData$pm10 - testData$v, length=length, labels=testData$wd,
               panel=function(...) {
                 panel.arrows(...)
                 panel.grid(...)
                 #panel.text(...)
                 },
               xlab="Date", ylab=quickText("PM10 (ug.m-3)"),
               main=quickText("Winds by Date and PM10")
               )
plt2

