
Introduction to Lattice
========================================================
autosize: false
transition: rotate
transition-speed: slow
James Durant, MSPH CIH<br>
ATSDR DCHI SSB Exposure Investigations and Data Analysis Team<br>
![](cover.png)
<div class="footer" style="margin-top:-50px;background-color:transparent;"
<SPAN STYLE="font-size:80%;font-weight:bold;">CDC ATSDR R USERS GROUP<br>March 26, 2015</SPAN>
</div>







Why learn lattice?
========================================================
- older than *ggplot2* - many packages have used it
- can do some things that are difficult in *ggplot2* (e.g. 3d scatter plots)
- default appearance can be set ahead of time, and changed
- returns object which can be manipulated, combined or otherwise changed as needed
- available in base R

Because of it's flexibiliy 

Why learn lattice - example in the package, openair
========================================================


```{r, echo=FALSE}
library(openair)
library(gridExtra)
wR <- windRose(mydata, main="A Wind Rose")
```
***
```{r, echo=FALSE}
pA <- polarAnnulus(mydata, main="Polar Annulus")
```

Why learn lattice - example in the package, openair
========================================================

- In *openair* both plots (windRose and polarAnnulus) are based on xyplot
- Package author used a combination of custom panel functions, legend functions to create these graphics.
- xyplot is a 'scatterplot' function.
<a href="https://r-forge.r-project.org/scm/?group_id=473">R-Forge Repository For openair</a> 

What we will be covering today
========================================================
- basic ways to create lattice plots
- how to modify appearance of lattice plot objects using themes
- 2 examples of customized plots in lattice

We will touch on <a href="https://www.stat.auckland.ac.nz/~paul/RG2e/">grid graphics</a>, but it underlies many of the functions in lattice. You can learn about grid at: https://www.stat.auckland.ac.nz/~paul/RG2e/



Lattice arguments consists of:
========================================================
- high level functions (similar in general to R graphics)
- functions that are called from within high level functions
  + panel functions 
  + page functions
  + key functions
- lists of lists parameters settings that control appearance of plots
  + par.settings - can be set up by user external to function or changed by graphic
  + scales - control appearance of scales
- Other settings that control labels, titles, layout, etc.


Lattice arguments consists of:
========================================================
![](drawing.png)

Basic lattice example
========================================================
class:small-code
There are 2 packages generally used:

```{r}
library(lattice)
library(latticeExtra)
```
Both provide functions that perform graphing, although the 'Extra' package works more with plot manipulation. 
 - Default _high level_ lattice functions at first will appear to work like traditional graphics calls.
 
Example Plot
========================================================
class:small-code
```{r, fig.align='left', fig.width=8, fig.height=4}
carPlot <- xyplot(dist ~ speed, data=cars, type=c("p","r","g"), xlab="Speed (mph)", ylab="Stopping Distance (ft)")
class(carPlot)
plot(carPlot)
```
***
Note the class of carPlot is *trellis* -  we will talk about modifying how trellis objects are displayed later.

Arguments of xyplot
========================================================
class:small 
* <span style="color:red">`dist ~ speed`</span> is formula relating distance as a function of speed. 
* <span style="color:red">`data = cars`</span>  is the data.frame we are analyzing (built in dataset see `?cars`)
* <span style="color:red">`type = c("p","r", "g")`</span> is an argument passed to the `panel.xyplot` function which does the following:
  + `"p"` adds `panel.points` function
  + `"r"` adds `panel.lmline` function
  + `"g"` adds `panel.grid` to function
* <span style="color:red">`xlab`</span> and <span style="color:red">`ylab`</span> are the same as `plot` 

Panel Functions -speckled boxplots
========================================================
class:small-code
```{r, fig.align='left', fig.width=8, fig.height=4}
carPlot.bwplot <- bwplot(mpg ~ factor(cyl), data=mtcars, 
                         panel=function(...){
                           panel.xyplot(...,jitter.x=TRUE, factor=0.5, col="red", cex=0.8, pch=19)
                           panel.bwplot(...)
                           panel.grid(...)
                         }
                         , 
                         xlab="Cylinders", 
                         ylab="Miles per Gallon (mpg)")
```


Panel Functions -speckled boxplots
========================================================
class:small-code
```{r, fig.align='left', fig.width=10, fig.height=6}
plot(carPlot.bwplot)
```


Examples of High Level Lattice Functions
========================================================

```{r, echo=FALSE, results='asis'}
library(xtable)
table1 <- read.csv("Book1.csv")
print(xtable(table1), type="html", include.rownames=FALSE, html.table.attributes ="border=0")
```
<br><div class="footer" style="background-color:transparent;"
<SPAN STYLE="font-size:20%;font-weight:bold;">
***
Examples: <br><a href="http://lmdvr.r-forge.r-project.org/figures/figures.html">lmdvr.r-forge.r-project.org/figures/figures.html</a></SPAN></div>


                     
Basics of a lattice plot call
========================================================
class:small 
- a formula and data
- a panel function (can be left at default or changed)
- scales (optional - as list)
- key (optional as list) produce legend or key
- par.settings (optional as list) control appearance settings
- par.strip.text (optional as list) text inside shingle
- Additional arguments or functions

Basics of a lattice plot call - conditioning
========================================================
class:small-code
Compare across (|) as factor
```{r, fig.align='center', fig.width=10, fig.height=6}
xyplot(mpg~ hp | factor(cyl), data = mtcars, layout=c(3,1))
```

Basics of a lattice plot call - conditioning with shingles
========================================================
class:small-code
Compare across (|) numeric
```{r, fig.align='center', fig.width=10, fig.height=6}
data(airquality)
airquality$Temp <- equal.count(airquality$Temp)
xyplot(Ozone~Solar.R|Temp, data=airquality)
```


Basics of a lattice plot call - conditioning with shingles
========================================================
class:small-code
But the danger here is there are overlapping ranges in each panel
```{r, fig.align='center', fig.width=10, fig.height=6}
plot(airquality$Temp)
```



Basics of a lattice plot call - interactions
========================================================
class:small-code
Compare across (|) with interaction
```{r, fig.align='center', fig.width=10, fig.height=6}
xyplot(mpg~ hp | factor(cyl)+factor(gear), data = mtcars)
```


Basics of a lattice plot call - interactions (plus key)
========================================================
class:small-code
Compare across (|) with grouping variable
```{r, fig.align='center', fig.width=10, fig.height=6}
(carPlot.key = xyplot(mpg~ hp | factor(cyl), group=factor(gear), data = mtcars, auto.key=list(space="right", title="Gears", border=TRUE)))
```


Basics of a lattice plot call - scales
========================================================
class:small-code
We can control the scales with a list.
```{r, fig.align='center', fig.width=10, fig.height=6}
xyplot(mpg~ hp | factor(cyl), group=factor(gear), data = mtcars, auto.key=list(space="right", title="Gears"), scales=list(alternating=FALSE))
```

Basics of a lattice plot call - page function
========================================================
class:small-code
We can annotate our plot using the page argument with a function.
```{r, fig.align='center', fig.width=10, fig.height=6}
notation.plot <- xyplot(mpg~ hp | factor(cyl), group=factor(gear), data = mtcars, 
       auto.key=list(space="right", title="Gears", 
                     border=TRUE, between.columns=4, cex.title=0.8), 
       scales=list(alternating=FALSE),
       page=function(n){
         grid:::grid.text("Data Source: Henderson and Velleman (1981), Building multiple regression models interactively. Biometrics, 37, 391â€“411", x=0.40, y=0.01, default.units="npc", just=c("left","bottom"), gp=grid:::gpar(fontsize=8))
       })
```

Basics of a lattice plot call - page function
========================================================
class:small-code
The grid.text is now plugged permanently into the object
```{r, fig.align='center', fig.width=10, fig.height=6}
plot(notation.plot)
```


So What Controls Appearance in Lattice Plots?
========================================================
class:small-code
There is a function to show how the graphics will default display in lattice:

```{r, fig.align='center', fig.width=10, fig.height=6}
show.settings()
```


Finding and Changing trellis.par
========================================================
class:small-code
- Use trellis.par.get() to get the current theme, and pass it into 2 objects - oldTheme and newTheme. 
- We will edit newTheme and save oldTheme for latter.
```{r}
newTheme <- oldTheme <-trellis.par.get()
grep("symbol", names(newTheme), value=TRUE)
data.frame(trellis.par.get("plot.symbol"))
```


Finding and Changing trellis.par - plot symbols
========================================================
class:small-code

```{r}
data.frame(newTheme$plot.symbol) # data.frame is optional - just makes things fit in slide
```

There are 6 properties that control the appearance of plot symbol:
- alpha is transparency [0-1] ; cex is size
- col is color ; font is font set
- pch is symbol ;  fill is color fill


Finding and Changing trellis.par - polygons
========================================================
class:small-code
You can also use grep to find all parameters that control color of polygon:

```{r}
lapply(newTheme[grep("polygon", names(newTheme))], names)
```

Finding and Changing trellis.par - editing and applying our theme
========================================================
class:small-code
Change some default parameters:
```{r, fig.align='right', fig.width=6, fig.height=4}
newTheme$plot.symbol$pch <- 20
newTheme$plot.symbol$col <- "#000000"
newTheme$plot.line$col <- "red"
trellis.par.set(newTheme)
show.settings()
```
<div class = "right">trellis.par.set changes the default behavior of the lattice graphics.</div>

Finding and Changing trellis.par example
========================================================
class:small-code
Now when we call xyplot, it will use black circles and a red line:
```{r, fig.align='center', fig.width=10, fig.height=6}
plot(carPlot)
```

Finding and Changing trellis.par example
========================================================
class:small-code
But if I wanted to go back (for this plot):
```{r, fig.align='center', fig.width=10, fig.height=6}
update(carPlot, par.settings=oldTheme)
```

Key thoughts for controlling appearance in lattice
========================================================
- appearance is a 'theme' controlled by a list of parameters
- current settings obtained by trellis.par.get and/or show.settings()
- can be manipulated and set with trellis.par.set()
- set for an individual lattice plot with the par.setting argument.

Want ggplot2 appearance?
========================================================
class:small-code
Themes can be pre-defined:
```{r, fig.align='center', fig.width=10, fig.height=6}
update(carPlot, par.settings=ggplot2like())
```

Look like an Economist?
========================================================
class:small-code
Or even for a publication:
```{r, fig.align='center', fig.width=10, fig.height=6}
update(carPlot, par.settings=theEconomist.theme(with.bg=TRUE), type=c("p","r"))
```

There are pre-defined themes for standard devices
========================================================
class:small-code
each graphics device has a theme that you can access:
```{r, fig.align='center',  fig.width=10, fig.height=6}
bwtheme <- standard.theme("pdf", color=FALSE)
bwtheme$plot.symbol$pch <- 20
update(carPlot, par.settings = bwtheme)
```

A CIO Theme (ATSDR-like)
========================================================
class:small-code
Or even for my office:
```{r, fig.align='center'}
atsdrCols <- c("#1e5aaf","#76b18f", "#04517d", "#395b44", "#4a1705", "#edad09", "#adb479" )
atsdr.theme <-custom.theme(symbol = atsdrCols, fill=atsdrCols,region=c(atsdrCols[2], "white", atsdrCols[1]), reference="#e8e8e8")

#boxplots fix
atsdr.theme$box.umbrella$lty <- 1
atsdr.theme$box.rectangle$col <- atsdrCols[1]
atsdr.theme$box.rectangle$fill <- atsdrCols[7]
atsdr.theme$box.dot$pch <- "|"
atsdr.theme$superpose.symbol$pch <- c(16,17,18,19,20)
atsdr.theme$superpose.symbol$col <- c(atsdrCols[5:7],atsdrCols[1:4])
atsdr.theme$superpose.line$col <- c(atsdrCols[5:7],atsdrCols[1:4])
atsdr.theme$plot.symbol$pch <- 19
atsdr.theme$strip.background$col <- atsdrCols[7:1]
atsdr.theme$strip.shingle$col <- atsdrCols[1:7]


#font fix
atsdr.theme$grid.pars = list(family="serif")
```

A CIO Theme (ATSDR-like)
========================================================
class:small-code
Or even for my office:
```{r, fig.align='center', fig.width=10, fig.height=6}
show.settings(atsdr.theme)
```

A CIO Theme (ATSDR-like)
========================================================
class:small-code
Or even for my office:
```{r, fig.align='center', fig.width=10, fig.height=6}
update(carPlot.key, par.settings=atsdr.theme)
```




Example 1: Two scales on y-axis
========================================================
class:small-code
- We have been given the task of creating a plot of
 + #cases left y axis
 + rate of disease on right y-axis
 + Age groups of cases on x-axis
 
[code](./twoAxis.R)


Example 1: Two scales on y-axis (read in the data, set theme)
========================================================
class:small-code
First we read in the data,create the age catagories, and set our theme
```{r}

library(lattice)
library(latticeExtra)

p<-read.csv("./sampleData.csv")
head(p)
```

Example 1: Two scales on y-axis (read in the data, set theme)
========================================================
class:small-code
First we read in the data,create the age catagories, and set our theme
```{r}

#Age categories for x-axis.
name1<-c("","0-4","5-9","10-14","15-19", "20-24",
         "25-29","30-34","35-39","40-44","45-49",
         "50-54","55-59","60-64","65-69","70-74",
         "75-79","80-84","85+")

p$`Age Catagory` <- factor(name1, levels=name1)

#create a theme from pdf device
bwtheme <- standard.theme("pdf", color=FALSE)
```
 
Example 1: Two scales on y-axis (plot counts data)
========================================================
class:small-code
next create a trellis object from barplot for count data
```{r}
dCountPlot <-   barchart(deaths~`Age Catagory`, data=p, ylab="Deaths(n)\n", 
           xlab="Age Catagory", par.settings = bwtheme, axis = axis.grid, 
           key=list(
             x=.05,y=.9, text=list(lab="Deaths"),
             rectangles = list(col="dark grey"),
             text=list(lab="Death Rate"), 
             lines=list( pch=19, col="black", type="o", lty=2, 
                         cex=0.5, lwd=1),
             transparent=T,border=F,rep=F, columns=1
           ),
           ylim=c(0,13000)    # note y1 and y2 1000:1
  )
```

Example 1: Two scales on y-axis (plot rate data)
========================================================
class:small-code
next create a trellis object from xylot for rate data
```{r, eval=FALSE}
dRatePlot <- xyplot(rate ~ `Age Catagory`, data=p, 
                    type="o", 
                    pch=16, 
                    lend=2, 
                    cex=1, 
                    ylab="Deaths per 100,000",
                    xlab="Age Catagory",
                    par.settings = bwtheme, 
                    axis = axis.grid, 
                    ylim=c(0,13)
                    )
  
```


Example 1: Two scales on y-axis (final plot)
========================================================
class:small-code
next create a trellis object from barplot
```{r, eval=FALSE}
doubleYScale(dCountPlot, dRatePlot, add.ylab2 = TRUE, xlab="Age Catagory")
```

```{r, echo = FALSE, fig.width=10, fig.height=6, fig.align='center' }
source("./twoAxis.R")
```



Example 2: Customized panel function
========================================================
class:small-code
We use the attributes of a lattice xyplot to help create a arrows using panel.arrows:
[code](./xyArrows.R)
```{r, echo=FALSE, fig.align='center'}
require(latticeExtra)
require(openair)
library(circular)

Sys.setenv(TZ='GMT')
testData <- selectByDate(mydata, start="1/7/1999", end="2/7/1999") # select 2 days of data

plt <- xyplot(pm10~date, data=testData, type="g", xlab="Date", ylab=quickText("pm10 (ug.m-3)"))
deltaX <- as.numeric(plt$x.limits[[2]]) - as.numeric(plt$x.limits[[1]])
deltaY <- as.numeric(plt$y.limits[[2]]) - as.numeric(plt$y.limits[[1]])

pltRatio <- plt$aspect.ratio
ratio <- deltaY/deltaX
factor = 3600
length = 0.05

#scale wind speed
scaleWS <- testData$ws/max(testData$ws, na.rm=TRUE)
testData$u <- sin(rad(testData$wd))  * factor * scaleWS
testData$v <- cos(rad(testData$wd)) *  factor * ratio/pltRatio * scaleWS

plt2 <- xyplot(pm10~date, data=testData, x0=testData$date + testData$u ,y0=testData$pm10 + testData$v, x1 = testData$date - testData$u,
               y1= testData$pm10 - testData$v, length=length, labels=testData$wd,
               panel=function(...) {
                 panel.arrows(...)
                 panel.grid(...)
                 #panel.text(...)
                 },
               xlab="Date", ylab=quickText("PM10 (ug.m-3)"),
               main=quickText("Winds by Date and PM10")
               )
plt2
```


Example 2: Customized panel function (part 1: data setup)
========================================================
class:small-code
Load and modify the data
[code](./xyArrows.R)
```{r,  fig.align='center', eval=FALSE}
require(latticeExtra)
require(openair)
library(circular)

Sys.setenv(TZ='GMT')
testData <- selectByDate(mydata, start="1/7/1999", end="2/7/1999") # select 2 days of data

#This is where I use trellis to my advantage
plt <- xyplot(pm10~date, data=testData, type="g", xlab="Date", ylab=quickText("pm10 (ug.m-3)"))
deltaX <- as.numeric(plt$x.limits[[2]]) - as.numeric(plt$x.limits[[1]])
deltaY <- as.numeric(plt$x.limits[[2]]) - as.numeric(plt$x.limits[[1]])

pltRatio <- plt$aspect.ratio
ratio <- deltaY/deltaX
factor = 3600
length = 0.05

#scale wind speed so 1 day length = max wind speed
scaleWS <- testData$ws/max(testData$ws, na.rm=TRUE)
testData$u <- sin(rad(testData$wd))  * factor * scaleWS
testData$v <- cos(rad(testData$wd)) *  factor * ratio/pltRatio * scaleWS
```

Example 2: Customized panel function (part 2: do plot)
========================================================
class:small-code
Use xyplot, panel.arrows, panel.grid to accomplish plot
```{r,  fig.align='center', eval=FALSE}
plt2 <- xyplot(pm10~date, data=testData, x0=testData$date + testData$u ,y0=testData$pm10 + testData$v, x1 = testData$date - testData$u,
               y1= testData$pm10 - testData$v, length=length, labels=testData$wd,
               panel=function(...) {
                 panel.arrows(...)
                 panel.grid(...)
                 }                 },
               xlab="Date", ylab=quickText("PM10 (ug.m-3)"),
               main=quickText("Winds by Date and PM10")
               )
plt2
```


Final Key Points
========================================================
class:small-code
- Lattice is based on cascades of functions and lists
- Output of lattice is trellis object which can be accessed directly used in your functions
- Look and feel can be controlled by themes
- Themes can be made universal by trellis.par.set()




